within ;
package HESProject
  model HESModel
    parameter Real N_reactors=180 "Number of nuclear reactors/Natrium systems";
    parameter Real N_windturbines=1e4 "Number of wind turbines";
    parameter Real N_solarpanels=1e8 "Square meters of solar panels";

    Modelica.Blocks.Interaction.Show.RealValue realValue
      annotation (Placement(transformation(extent={{70,-20},{90,0}})));
    Modelica.Blocks.Sources.CombiTimeTable DemandData(
      tableOnFile=true,
      tableName="demand",
      fileName=
          "G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Formatted/Load/Load2020_modelica.txt",
      columns=2:size(DemandData.table, 2),
      smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
      "Time series data of ERCOT energy demand in 2020" annotation (Placement(
          transformation(
          extent={{-8,-8},{8,8}},
          rotation=0,
          origin={-80,-30})));

    Modelica.Blocks.Math.Product Load
      annotation (Placement(transformation(extent={{-52,-46},{-42,-36}})));
    Modelica.Blocks.Sources.Constant MWh_to_Wavg(k=1e6)
      annotation (Placement(transformation(extent={{-88,-62},{-72,-46}})));
    Modelica.Blocks.Sources.CombiTimeTable WindData(
      tableOnFile=true,
      tableName="ws50m",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ws50m_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,38},{-76,56}})));
    Modelica.Blocks.Sources.CombiTimeTable SolarData(
      tableOnFile=true,
      tableName="ghi",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ghi_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,10},{-74,30}})));
    Wind.WindFarm windFarm(N_windturbines=N_windturbines)
      annotation (Placement(transformation(extent={{-62,32},{-30,62}})));
    Solar.SolarFarm solarFarm(N_solarpanels=N_solarpanels)
      annotation (Placement(transformation(extent={{-60,6},{-30,34}})));
    Natrium.NuclearSystem nuclearSystem(N_reactors=N_reactors)
      annotation (Placement(transformation(extent={{26,-28},{46,-8}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{-12,22},{0,34}})));
    Modelica.Blocks.Math.Add add1(k1=-1)
      annotation (Placement(transformation(extent={{-8,-24},{12,-4}})));
  equation
    connect(DemandData.y[1], Load.u1) annotation (Line(points={{-71.2,-30},{-56,
            -30},{-56,-38},{-53,-38}},
                                  color={0,0,127}));
    connect(MWh_to_Wavg.y, Load.u2) annotation (Line(points={{-71.2,-54},{-53,
            -54},{-53,-44}},
                        color={0,0,127}));
    connect(WindData.y[1], windFarm.WindData_in)
      annotation (Line(points={{-75.1,47},{-64,47},{-64,46.85},{-59.6,46.85}},
                                                     color={0,0,127}));
    connect(SolarData.y[1], solarFarm.SolarData_in)
      annotation (Line(points={{-73,20},{-58.5,20}},      color={0,0,127}));
    connect(nuclearSystem.NetDemand_out, realValue.numberPort) annotation (Line(
          points={{47.1,-17.3},{62,-17.3},{62,-10},{68.5,-10}},
                                                              color={0,0,127}));
    connect(solarFarm.PowerOut, add.u2) annotation (Line(points={{-31.5,20},{
            -22,20},{-22,24.4},{-13.2,24.4}}, color={0,0,127}));
    connect(add.y, add1.u1) annotation (Line(points={{0.6,28},{4,28},{4,0},{-16,
            0},{-16,-8},{-10,-8}}, color={0,0,127}));
    connect(Load.y, add1.u2) annotation (Line(points={{-41.5,-41},{-16,-41},{
            -16,-20},{-10,-20}}, color={0,0,127}));
    connect(add1.y, nuclearSystem.Demand_in) annotation (Line(points={{13,-14},
            {18,-14},{18,-17.1},{25.3,-17.1}}, color={0,0,127}));
    connect(windFarm.PowerOut, add.u1) annotation (Line(points={{-31.92,47},{
            -20,47},{-20,31.6},{-13.2,31.6}}, color={0,0,127}));
    annotation (uses(Modelica(version="4.0.0")), experiment(
        StopTime=31622400,
        Interval=3600,
        __Dymola_fixedstepsize=360,
        __Dymola_Algorithm="Lsodar"));
  end HESModel;

  package Natrium
    model NatriumSimple
      package Medium =
          TRANSFORM.Media.Fluids.Sodium.ConstantPropertyLiquidSodium;

      // Operational constants
      parameter Medium.Temperature T_hot=490+273.15 "Hot tank temperature";
      parameter Medium.Temperature T_cold=300+273.15 "Cold tank temperature";
      parameter Medium.AbsolutePressure p=101325 "Absolute pressure in fluid";
      parameter Modelica.Units.SI.HeatFlowRate Q_dot_in=840e6 "Heat generated by the reactor";
      parameter Modelica.Units.SI.Power W_dot_max=500e6 "Maximum electric power output";
      parameter Modelica.Units.SI.Power W_dot_nom=345e6 "Nominal electric power output";
      Medium.SpecificEnthalpy dh = Medium.specificEnthalpy_pTX(p, T_hot, {1})
      - Medium.specificEnthalpy_pTX(p, T_cold, {1}) "Enthalpy difference between hot and cold temperatures";
      Medium.MassFlowRate m_dot_r=Q_dot_in/dh "Reactor mass flow rate";
      Real eta_th=W_dot_nom/Q_dot_in "Steam cycle efficiency";

      // Used to specify the initial values of the tank stored mass variables
      parameter Modelica.Units.SI.Mass m_cold_start=13e6;
      parameter Modelica.Units.SI.Mass m_hot_start=13e6;

      // Steam cycle mass flow rate variables used to define the control structure
      Medium.MassFlowRate m_dot_sc_max;
      Medium.MassFlowRate m_dot_sc_min;
      Medium.MassFlowRate m_dot_sc_des;

      // Variables to solve for
      Medium.MassFlowRate m_dot_sc "Steam cycle mass flow rate";
      Modelica.Units.SI.Mass m_hot "Mass of stored fluid in the hot tank";
      Modelica.Units.SI.Mass m_cold "Mass of stored fluid in the cold tank";
      Modelica.Units.SI.Power power_out;

      Modelica.Blocks.Interfaces.RealInput demand
        annotation (Placement(transformation(extent={{-126,-20},{-86,20}})));
      Modelica.Blocks.Interfaces.RealOutput net_demand=demand-power_out
        annotation (Placement(transformation(extent={{96,-10},{116,10}}),
            iconTransformation(extent={{96,-10},{116,10}})));
    initial equation
      m_cold=m_cold_start;
      m_hot=m_hot_start;
    equation
      m_dot_sc_des = demand / eta_th / dh;
      if m_hot <= 0 then // hot tank is empty
        m_dot_sc_max = m_dot_r;
        m_dot_sc_min = 0;
      elseif m_cold <= 0 then // cold tank is empty
        m_dot_sc_max = W_dot_max / eta_th / dh;
        m_dot_sc_min = m_dot_r;
      else // both tanks have some fluid
        m_dot_sc_max = W_dot_max / eta_th / dh;
        m_dot_sc_min = 0;
      end if;
      m_dot_sc = max(m_dot_sc_min, min(m_dot_sc_max, m_dot_sc_des)); //
      power_out = eta_th*m_dot_sc*dh;

      der(m_hot) = m_dot_r - m_dot_sc;
      der(m_cold) = m_dot_sc - m_dot_r;

      annotation (Icon(graphics={
            Bitmap(extent={{-54,-32},{56,70}}, fileName="modelica://HESProject/Icons/nuclear_power.png"),
            Rectangle(
              extent={{-86,94},{96,-90}},
              lineColor={0,0,0},
              lineThickness=1),
            Text(
              extent={{-48,-40},{48,-70}},
              textColor={0,0,0},
              textString="Natrium")}));
    end NatriumSimple;

    model NuclearSystem
      parameter Real N_reactors;

      Real E_tot_nuclear=natriumSimple.power_out*N_reactors;

      Modelica.Blocks.Math.Division division
        annotation (Placement(transformation(extent={{-44,-4},{-26,14}})));
      Modelica.Blocks.Sources.Constant reactors(k=N_reactors)
        annotation (Placement(transformation(extent={{-82,-44},{-64,-26}})));
      Modelica.Blocks.Math.Product product2
        annotation (Placement(transformation(extent={{44,-20},{60,-4}})));
      NatriumSimple natriumSimple(m_cold_start=56e6, m_hot_start=56e6)
        annotation (Placement(transformation(extent={{2,-8},{26,16}})));
      Modelica.Blocks.Interfaces.RealInput Demand_in annotation (Placement(
            transformation(extent={{-124,-18},{-88,18}}), iconTransformation(extent={{-124,
                -18},{-88,18}})));
      Modelica.Blocks.Interfaces.RealOutput NetDemand_out annotation (Placement(
            transformation(extent={{92,-16},{124,16}}),iconTransformation(extent={{92,-16},
                {124,16}})));
    equation
      connect(reactors.y,division. u2) annotation (Line(points={{-63.1,-35},{-50,-35},
              {-50,-0.4},{-45.8,-0.4}},                   color={0,0,127}));
      connect(reactors.y,product2. u2) annotation (Line(points={{-63.1,-35},{-50,-35},
              {-50,-16.8},{42.4,-16.8}},            color={0,0,127}));
      connect(natriumSimple.net_demand, product2.u1) annotation (Line(points={{26.72,4},
              {42.4,4},{42.4,-7.2}},                color={0,0,127}));
      connect(Demand_in, division.u1) annotation (Line(points={{-106,0},{-62,0},
              {-62,10.4},{-45.8,10.4}},
                                   color={0,0,127}));
      connect(product2.y, NetDemand_out) annotation (Line(points={{60.8,-12},{
              68,-12},{68,0},{108,0}},
                               color={0,0,127}));
      connect(division.y, natriumSimple.demand) annotation (Line(points={{-25.1,
              5},{-12,5},{-12,4},{1.28,4}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Bitmap(extent={{-34,-12},{34,66}}, fileName=
                  "modelica://HESProject/Icons/nuclear_system.png"),
            Rectangle(
              extent={{-88,82},{92,-76}},
              lineColor={0,0,0},
              lineThickness=1),
            Text(
              extent={{-70,-18},{74,-66}},
              textColor={0,0,0},
              textString="Nuclear")}),                               Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end NuclearSystem;
  end Natrium;

  package Solar

    model SolarFarm
      parameter Real N_solarpanels;
      Modelica.Blocks.Math.Product product4
        annotation (Placement(transformation(extent={{28,-26},{50,-4}})));
      Modelica.Blocks.Sources.Constant solar_panel_area(k=N_solarpanels)
        annotation (Placement(transformation(extent={{-30,-44},{-10,-24}})));
      SolarPanel solarPanel
        annotation (Placement(transformation(extent={{-34,2},{0,26}})));
      Modelica.Blocks.Interfaces.RealInput SolarData_in
        annotation (Placement(transformation(extent={{-100,-10},{-80,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));
      Modelica.Blocks.Interfaces.RealOutput PowerOut
        annotation (Placement(transformation(extent={{80,-10},{100,10}}),
            iconTransformation(extent={{80,-10},{100,10}})));
    equation
      connect(solar_panel_area.y,product4. u2) annotation (Line(points={{-9,-34},{10,
              -34},{10,-22},{25.8,-22},{25.8,-21.6}},
                                           color={0,0,127}));
      connect(solarPanel.PowerOut, product4.u1) annotation (Line(points={{1.02,14},
              {16,14},{16,-8.4},{25.8,-8.4}},
                                            color={0,0,127}));
      connect(SolarData_in, solarPanel.SolarData) annotation (Line(points={{-90,0},
              {-44,0},{-44,14},{-35.02,14}}, color={0,0,127}));
      connect(product4.y, PowerOut) annotation (Line(points={{51.1,-15},{62,-15},
              {62,0},{90,0}},
                           color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-80,60},{80,-60}},
              lineColor={28,108,200},
              lineThickness=1), Text(
              extent={{-66,34},{66,-32}},
              textColor={28,108,200},
              textString="Solar Farm")}),                            Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end SolarFarm;

    model SolarPanel
      parameter Real efficiency=0.15;

      Modelica.Blocks.Interfaces.RealInput SolarData
        annotation (Placement(transformation(extent={{-126,-20},{-86,20}})));
      Modelica.Blocks.Interfaces.RealOutput PowerOut
        annotation (Placement(transformation(extent={{96,-10},{116,10}})));
    equation
      PowerOut = efficiency*SolarData;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end SolarPanel;

    model LimitedSolarPanel
      parameter Real efficiency=0.15;
      parameter Real RatedPower=200 "Rated power [W/m^2]";

      Modelica.Blocks.Interfaces.RealInput SolarData
        annotation (Placement(transformation(extent={{-126,-20},{-86,20}})));
      Modelica.Blocks.Interfaces.RealOutput PowerOut
        annotation (Placement(transformation(extent={{96,-10},{116,10}})));
    equation
      PowerOut = min(efficiency*SolarData, RatedPower);
      //PowerOut = efficiency*SolarData;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end LimitedSolarPanel;

    model LimitedSolarFarm
      parameter Real N_solarpanels;
      Modelica.Blocks.Math.Product product4
        annotation (Placement(transformation(extent={{28,-26},{50,-4}})));
      Modelica.Blocks.Sources.Constant solar_panel_area(k=N_solarpanels)
        annotation (Placement(transformation(extent={{-30,-44},{-10,-24}})));
      LimitedSolarPanel
                 limitedSolarPanel
        annotation (Placement(transformation(extent={{-34,2},{0,26}})));
      Modelica.Blocks.Interfaces.RealInput SolarData_in
        annotation (Placement(transformation(extent={{-100,-10},{-80,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));
      Modelica.Blocks.Interfaces.RealOutput PowerOut
        annotation (Placement(transformation(extent={{80,-10},{100,10}}),
            iconTransformation(extent={{80,-10},{100,10}})));
    equation
      connect(solar_panel_area.y,product4. u2) annotation (Line(points={{-9,-34},{10,
              -34},{10,-22},{25.8,-22},{25.8,-21.6}},
                                           color={0,0,127}));
      connect(product4.y, PowerOut) annotation (Line(points={{51.1,-15},{62,-15},
              {62,0},{90,0}},
                           color={0,0,127}));
      connect(limitedSolarPanel.PowerOut, product4.u1) annotation (Line(points=
              {{1.02,14},{16,14},{16,-8.4},{25.8,-8.4}}, color={0,0,127}));
      connect(SolarData_in, limitedSolarPanel.SolarData) annotation (Line(
            points={{-90,0},{-58,0},{-58,14},{-35.02,14}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-80,60},{80,-60}},
              lineColor={0,0,0},
              lineThickness=1), Text(
              extent={{-64,-12},{68,-78}},
              textColor={0,0,0},
              textString="Solar Farm"),
            Bitmap(extent={{-90,-28},{76,54}}, fileName=
                  "modelica://HESProject/Icons/solar_panel.jpg")}),  Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end LimitedSolarFarm;
  end Solar;

  package Wind
    model WindTurbineGE32
      parameter Modelica.Units.SI.Velocity Vci  "Cut in speed (m/s)";
      parameter Modelica.Units.SI.Velocity Vco  "Cut out speed (m/s)";
      parameter Modelica.Units.SI.Velocity Vr  "Rated speed (m/s)";
      parameter Modelica.Units.SI.Power Pmax  "Max Power (W)";  //the rated power
      parameter Real N  "Number of Wind Turbines";
      Modelica.Units.SI.Velocity v;

      Modelica.Blocks.Interfaces.RealInput WindData annotation (
        Placement(visible = true, transformation(origin = {-34, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-19, -1}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput WindPower annotation (
        Placement(visible = true, transformation(origin={56,-28},   extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, -70}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Blocks.Interfaces.RealOutput Nt annotation (
        Placement(visible = true, transformation(origin={58,-46},     extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {24, -70}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));

    equation

      v = WindData;
      Nt = N;
    if WindData < Vci then
      WindPower = 0;
    elseif WindData >= Vci and WindData < Vr then
      WindPower = (-1.0799*v^4 + 21.408*v^3 - 92.537*v^2 + 163.61*v - 71.155) * N;
      //This is the power curve fitted to a 4th ourder poly. for the GE 3.2MW turbine
    elseif WindData >= Vr and WindData < Vco then
      WindPower = N*Pmax;
    else
      WindPower = 0;
    end if;
    annotation (
        Icon(graphics={  Ellipse(extent = {{-6, 4}, {6, -4}}, endAngle = 360), Line(origin = {0, 28.3725}, points = {{2, -24.3725}, {4, -20.3725}, {0, 25.6275}, {-4, -20.3725}, {-2, -24.3725}, {-2, -24.3725}}), Line(origin = {-13.7633, -16.667}, points = {{7.7633, 14.667}, {3.7633, 12.667}, {-12.2367, -15.333}, {9.7633, 8.66704}, {11.7633, 12.667}, {11.7633, 12.667}}), Line(origin = {15.8841, -14.7223}, points = {{-9.88411, 12.7223}, {-5.88411, 10.7223}, {14.1159, -13.2777}, {-13.8841, 8.72234}, {-13.8841, 10.7223}, {-13.8841, 10.7223}}), Line(origin = {-0.99782, -31.9343}, points = {{-1.00218, 27.9343}, {-9.00218, -28.0657}, {8.99782, -28.0657}, {2.99782, 27.9343}, {2.99782, 27.9343}})}, coordinateSystem(initialScale = 0.1)),
        conversion(noneFromVersion=""));
    end WindTurbineGE32;

    model WindTest

      WindTurbineGE32 windTurbineGE32_1(
        Vci=2,
        Vco=25,
        Vr=12,
        Pmax=3230,
        N=2) annotation (Placement(transformation(extent={{-28,-12},{80,96}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
        tableOnFile=true,
        tableName="WindTest",
        fileName="C:/Users/a02185015/Documents/Book3.txt",
        smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{-90,18},{-44,64}})));
      Modelica.Blocks.Math.Add add
        annotation (Placement(transformation(extent={{32,-88},{72,-48}})));
      Modelica.Blocks.Sources.Sine sine(
        amplitude=500,
        f=0.1,
        offset=500)
        annotation (Placement(transformation(extent={{-86,-32},{-56,-2}})));
      Modelica.Blocks.Math.Add add1
        annotation (Placement(transformation(extent={{-2,-34},{16,-16}})));
      Modelica.Blocks.Sources.Trapezoid trapezoid(
        amplitude=500,
        rising=5,
        width=5,
        falling=5,
        period=20,
        offset=2000)
        annotation (Placement(transformation(extent={{-78,-78},{-58,-58}})));
    equation
      connect(combiTimeTable.y[1], windTurbineGE32_1.WindData) annotation (Line(
            points={{-41.7,41},{15.74,41},{15.74,41.46}}, color={0,0,127}));
      connect(sine.y, add1.u2) annotation (Line(points={{-54.5,-17},{-28,-17},{-28,
              -30.4},{-3.8,-30.4}}, color={0,0,127}));
      connect(windTurbineGE32_1.WindPower, add1.u1) annotation (Line(points={{26,
              4.2},{26,-6},{-12,-6},{-12,-19.6},{-3.8,-19.6}}, color={0,0,127}));
      connect(add1.y, add.u1) annotation (Line(points={{16.9,-25},{16.9,-26},{22,
              -26},{22,-56},{28,-56}}, color={0,0,127}));
      connect(trapezoid.y, add.u2) annotation (Line(points={{-57,-68},{-30,-68},{
              -30,-76},{28,-76},{28,-80}}, color={0,0,127}));
      annotation ();
    end WindTest;

    model WindTurbineGE32_noNt
      parameter Modelica.Units.SI.Velocity Vci  "Cut in speed (m/s)";
      parameter Modelica.Units.SI.Velocity Vco  "Cut out speed (m/s)";
      parameter Modelica.Units.SI.Velocity Vr  "Rated speed (m/s)";
      parameter Modelica.Units.SI.Power Pmax  "Max Power (W)";  //the rated power
      Modelica.Units.SI.Velocity v;

      Modelica.Blocks.Interfaces.RealInput WindData annotation (
        Placement(visible = true, transformation(origin = {-34, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-19, -1}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput WindPower annotation (
        Placement(visible = true, transformation(origin={56,-28},   extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, -70}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));

    equation

      v = WindData;
    if WindData < Vci then
      WindPower = 0;
    elseif WindData >= Vci and WindData < Vr then
      WindPower = (-1.0799*v^4 + 21.408*v^3 - 92.537*v^2 + 163.61*v - 71.155)*1000;
      //This is the power curve fitted to a 4th ourder poly. for the GE 3.2MW turbine
    elseif WindData >= Vr and WindData < Vco then
      WindPower = Pmax;
    else
      WindPower = 0;
    end if;
    annotation (
        Icon(graphics={  Ellipse(extent = {{-6, 4}, {6, -4}}, endAngle = 360), Line(origin = {0, 28.3725}, points = {{2, -24.3725}, {4, -20.3725}, {0, 25.6275}, {-4, -20.3725}, {-2, -24.3725}, {-2, -24.3725}}), Line(origin = {-13.7633, -16.667}, points = {{7.7633, 14.667}, {3.7633, 12.667}, {-12.2367, -15.333}, {9.7633, 8.66704}, {11.7633, 12.667}, {11.7633, 12.667}}), Line(origin = {15.8841, -14.7223}, points = {{-9.88411, 12.7223}, {-5.88411, 10.7223}, {14.1159, -13.2777}, {-13.8841, 8.72234}, {-13.8841, 10.7223}, {-13.8841, 10.7223}}), Line(origin = {-0.99782, -31.9343}, points = {{-1.00218, 27.9343}, {-9.00218, -28.0657}, {8.99782, -28.0657}, {2.99782, 27.9343}, {2.99782, 27.9343}})}, coordinateSystem(initialScale = 0.1)),
        conversion(noneFromVersion=""));
    end WindTurbineGE32_noNt;

    model WindFarm
      parameter Real N_windturbines;
      Modelica.Blocks.Interfaces.RealInput WindData_in annotation (Placement(
            transformation(extent={{-96,-12},{-74,10}}), iconTransformation(
              extent={{-96,-12},{-74,10}})));
      Modelica.Blocks.Interfaces.RealOutput PowerOut annotation (Placement(
            transformation(extent={{78,-10},{98,10}}), iconTransformation(
              extent={{78,-10},{98,10}})));
      Modelica.Blocks.Math.Product product3
        annotation (Placement(transformation(extent={{26,-52},{50,-28}})));
      Modelica.Blocks.Sources.Constant wind_turbines(k=N_windturbines)
        annotation (Placement(transformation(extent={{-48,-76},{-22,-50}})));
      WindTurbineGE32_noNt windTurbineGE32_noNt(
        Vci=3,
        Vco=25,
        Vr=12,
        Pmax=3.2e6)
        annotation (Placement(transformation(extent={{-62,-10},{4,56}})));
    equation
      connect(wind_turbines.y, product3.u2) annotation (Line(points={{-20.7,-63},
              {-4,-63},{-4,-46},{23.6,-46},{23.6,-47.2}}, color={0,0,127}));
      connect(windTurbineGE32_noNt.WindPower, product3.u1) annotation (Line(
            points={{-29,-0.1},{-29,-32.8},{23.6,-32.8}}, color={0,0,127}));
      connect(WindData_in, windTurbineGE32_noNt.WindData) annotation (Line(
            points={{-85,-1},{-64,-1},{-64,22.67},{-35.27,22.67}}, color={0,0,
              127}));
      connect(product3.y, PowerOut) annotation (Line(points={{51.2,-40},{78,-40},
              {78,0},{88,0}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-74,60},{78,-64}},
              lineColor={0,0,0},
              lineThickness=1), Text(
              extent={{-54,-18},{56,-76}},
              textColor={0,0,0},
              textString="Wind Farm"),
            Bitmap(extent={{-78,-36},{80,58}}, fileName=
                  "modelica://HESProject/Icons/wind_turbines.jpg")}),Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end WindFarm;
  end Wind;

  package Hydrogen
    model HydrogenStorage
      // For whatever reason, using 0 here gives problems! Just keep this as 1.
      parameter Real E0=1 "Initial amount of hydrogen storage";
      parameter Real eta_RT=0.9*0.83*0.9*0.6 "Round trip efficiency";

      Real E_stored "Amount of energy available for use";

      Modelica.Blocks.Interfaces.RealInput power_a
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealOutput power_b
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    initial equation
      E_stored = E0;
    equation
      if power_a < 0 then // excess production --> store the energy
        der(E_stored) = -power_a;
        power_b = 0;
      else // excess demand --> use stored energy to fulfill demand
        der(E_stored) = -power_a / eta_RT;
        power_b = power_a;
      end if;

    end HydrogenStorage;

    model HydrogenStorage2
      Real E_stored "Amount of energy available for use";
      //parameter Real E_max=10*3.7e6*1.5e-3*3.6e9/(0.9*0.83) "Maximum amount of energy allowed to be stored, calculated according to filling 10 salt caverns with hydrogen.";
      parameter Real E_max=1e16;

      // For whatever reason, using 0 here gives problems! Just keep this as 1.
      parameter Real eta_RT=0.9*0.83*0.9*0.6 "Round trip efficiency";

      Modelica.Blocks.Interfaces.RealInput power_a
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealOutput power_b
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    initial equation
      E_stored = E_max/2;
    equation
      if power_a < 0 then // excess production --> store the energy
        if E_stored > E_max then
          der(E_stored) = 0;
        else
          der(E_stored) = -power_a;
        end if;
        power_b = 0;
      else // excess demand --> use stored energy to fulfill demand
        if E_stored <= -1e4 then
          der(E_stored) = 0;
          power_b = 0;
        else
          der(E_stored) = -power_a / eta_RT;
          power_b = power_a;
        end if;
        //der(E_stored) = -power_a / eta_RT;
        //power_b = power_a;
      end if;

    end HydrogenStorage2;

    model HydrogenStorage3
      Real M_H2 "Amount of stored hydrogen";
      Real E_stored=M_H2*H2_E_density "Amount of energy available for use";
      //parameter Real E_max=10*3.7e6*1.5e-3*3.6e9/(0.9*0.83) "Maximum amount of energy allowed to be stored, calculated according to filling 10 salt caverns with hydrogen.";
      parameter Real M_max=1.2e8 "[kg] Maximum amount of hydrogen allowed to be stored. Equivalent to 20 salt caverns at 6000 tons/cavern";
      //parameter Real M_max=1.2e9 "[kg] Maximum amount of hydrogen allowed to be stored. Equivalent to 20 salt caverns at 6000 tons/cavern";
      parameter Real H2_E_density=142e6 "[J/kg H2] Energy density of H2";

      // For whatever reason, using 0 here gives problems! Just keep this as 1.
      parameter Real eta_in=0.9*0.83 "Efficiency to go from AC power to hydrogen";
      parameter Real eta_out=0.9*0.6 "Efficiency to go from hydrogen to AC power";
      Real eta_RT=eta_in*eta_out "Round trip efficiency";
      //parameter Real max_discharge_rate=3e9/H2_E_density "maximum rate at which energy can be discharged [kg/s]";
      parameter Real max_discharge_rate=M_max/(3*24*3600) "maximum rate at which energy can be discharged [kg/s]";

      Real H2_sold;

      Modelica.Blocks.Interfaces.RealInput power_a
        annotation (Placement(transformation(extent={{-118,-20},{-78,20}}),
            iconTransformation(extent={{-118,-20},{-78,20}})));
      Modelica.Blocks.Interfaces.RealOutput power_out
        annotation (Placement(transformation(extent={{94,-10},{114,10}}),
            iconTransformation(extent={{94,-10},{114,10}})));
      Modelica.Blocks.Interfaces.RealOutput unmet_demand
        annotation (Placement(transformation(extent={{94,50},{114,70}}),
            iconTransformation(extent={{94,50},{114,70}})));
      // Need to keep this as a rate that we can integrate later when we know the time steps
      Modelica.Blocks.Interfaces.RealOutput H2_sell_rate
        annotation (Placement(transformation(extent={{94,-70},{114,-50}}),
            iconTransformation(extent={{94,-70},{114,-50}})));
    initial equation
      M_H2=M_max; // IC: We start full!
      H2_sold=0;
    equation
      if power_a < 0 then // excess energy production --> store the energy
        if M_H2 > M_max then // storage is already full
          der(M_H2) = 0;
          H2_sell_rate = -power_a*eta_in/H2_E_density; // [kg/s]
        else // we can add to storage
          der(M_H2) = -power_a*eta_in/H2_E_density; // power in gets converted to H2 and added to storage
          H2_sell_rate = 0; // not selling H2
        end if;
        power_out = 0; // Not converting H2 to energy to meet demand
        unmet_demand = 0; // All demand has been met by other production methods
      else // unmet demand --> use stored energy to fulfill demand
        if M_H2 <= -1e4 then // Storage is gone. IDK why but using anything greater than this causes problems. Don't touch.
          der(M_H2) = 0;
          power_out = 0;
          unmet_demand = power_a;
        else // Use stored H2 to meet demand if possible. We're limited by the max discharge rate in this case.
          power_out = min(power_a, max_discharge_rate*H2_E_density*eta_out);
          der(M_H2) = -power_out/eta_out/H2_E_density; // accounts for inverter and fuel cell efficiencies
          unmet_demand = power_a - power_out;
        end if;
        H2_sell_rate = 0; // Always zero in this case since we're not producing hydrogen.
      end if;
      der(H2_sold)=H2_sell_rate;

      annotation (Icon(graphics={
            Bitmap(extent={{-134,-88},{142,122}}, fileName=
                  "modelica://HESProject/Icons/hydrogen_storage.jpg"),
            Rectangle(
              extent={{-78,82},{94,-84}},
              lineColor={0,0,0},
              lineThickness=1),
            Text(
              extent={{-50,-48},{68,-72}},
              textColor={0,0,0},
              textString="Hydrogen")}));
    end HydrogenStorage3;
  end Hydrogen;

  model HESModel2
    parameter Real N_reactors=41  "Number of nuclear reactors/Natrium systems";
    parameter Real N_windturbines=6699
                                      "Number of wind turbines";
    parameter Real N_solarpanels=1.176e8
                                     "Square meters of solar panels";

    Modelica.Blocks.Sources.CombiTimeTable DemandData(
      tableOnFile=true,
      tableName="demand",
      fileName=
          "G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Formatted/Load/Load2020_modelica.txt",
      columns=2:size(DemandData.table, 2),
      smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
      "Time series data of ERCOT energy demand in 2020" annotation (Placement(
          transformation(
          extent={{-8,-8},{8,8}},
          rotation=0,
          origin={-80,-30})));

    Modelica.Blocks.Math.Product Load
      annotation (Placement(transformation(extent={{-52,-46},{-42,-36}})));
    Modelica.Blocks.Sources.Constant MWh_to_Wavg(k=1e6)
      annotation (Placement(transformation(extent={{-88,-62},{-72,-46}})));
    Modelica.Blocks.Sources.CombiTimeTable WindData(
      tableOnFile=true,
      tableName="ws50m",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ws50m_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,38},{-76,56}})));
    Modelica.Blocks.Sources.CombiTimeTable SolarData(
      tableOnFile=true,
      tableName="ghi",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ghi_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,10},{-74,30}})));
    Wind.WindFarm windFarm(N_windturbines=N_windturbines)
      annotation (Placement(transformation(extent={{-62,32},{-30,62}})));
    Solar.SolarFarm solarFarm(N_solarpanels=N_solarpanels)
      annotation (Placement(transformation(extent={{-60,6},{-30,34}})));
    Natrium.NuclearSystem nuclearSystem(N_reactors=N_reactors)
      annotation (Placement(transformation(extent={{26,-28},{46,-8}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{-12,22},{0,34}})));
    Modelica.Blocks.Math.Add add1(k1=-1)
      annotation (Placement(transformation(extent={{-8,-24},{12,-4}})));
    Hydrogen.HydrogenStorage hydrogenStorage(eta_RT=0.8)
      annotation (Placement(transformation(extent={{62,-28},{82,-8}})));
  equation
    connect(DemandData.y[1], Load.u1) annotation (Line(points={{-71.2,-30},{-56,
            -30},{-56,-38},{-53,-38}},
                                  color={0,0,127}));
    connect(MWh_to_Wavg.y, Load.u2) annotation (Line(points={{-71.2,-54},{-53,
            -54},{-53,-44}},
                        color={0,0,127}));
    connect(WindData.y[1], windFarm.WindData_in)
      annotation (Line(points={{-75.1,47},{-64,47},{-64,46.85},{-59.6,46.85}},
                                                     color={0,0,127}));
    connect(SolarData.y[1], solarFarm.SolarData_in)
      annotation (Line(points={{-73,20},{-58.5,20}},      color={0,0,127}));
    connect(solarFarm.PowerOut, add.u2) annotation (Line(points={{-31.5,20},{
            -22,20},{-22,24.4},{-13.2,24.4}}, color={0,0,127}));
    connect(add.y, add1.u1) annotation (Line(points={{0.6,28},{4,28},{4,0},{-16,
            0},{-16,-8},{-10,-8}}, color={0,0,127}));
    connect(Load.y, add1.u2) annotation (Line(points={{-41.5,-41},{-16,-41},{
            -16,-20},{-10,-20}}, color={0,0,127}));
    connect(add1.y, nuclearSystem.Demand_in) annotation (Line(points={{13,-14},
            {18,-14},{18,-17.1},{25.3,-17.1}}, color={0,0,127}));
    connect(windFarm.PowerOut, add.u1) annotation (Line(points={{-31.92,47},{
            -20,47},{-20,31.6},{-13.2,31.6}}, color={0,0,127}));
    connect(nuclearSystem.NetDemand_out, hydrogenStorage.power_a)
      annotation (Line(points={{47.1,-17.3},{60,-18}}, color={0,0,127}));
    annotation (                                 experiment(
        StopTime=31622400,
        Interval=3600,
        __Dymola_fixedstepsize=360,
        __Dymola_Algorithm="Lsodar"));
  end HESModel2;

  model HESModel3
    parameter Real N_reactors=25  "Number of nuclear reactors/Natrium systems";
    parameter Real N_windturbines=7410
                                      "Number of wind turbines";
    parameter Real N_solarpanels=3.8425e8
                                     "Square meters of solar panels";

    Modelica.Blocks.Sources.CombiTimeTable DemandData(
      tableOnFile=true,
      tableName="demand",
      fileName=
          "G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Formatted/Load/Load2020_modelica.txt",
      columns=2:size(DemandData.table, 2),
      smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
      "Time series data of ERCOT energy demand in 2020" annotation (Placement(
          transformation(
          extent={{-8,-8},{8,8}},
          rotation=0,
          origin={-80,-30})));

    Modelica.Blocks.Math.Product Load
      annotation (Placement(transformation(extent={{-52,-46},{-42,-36}})));
    Modelica.Blocks.Sources.Constant MWh_to_Wavg(k=1e6)
      annotation (Placement(transformation(extent={{-88,-62},{-72,-46}})));
    Modelica.Blocks.Sources.CombiTimeTable WindData(
      tableOnFile=true,
      tableName="ws50m",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ws50m_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,38},{-76,56}})));
    Modelica.Blocks.Sources.CombiTimeTable SolarData(
      tableOnFile=true,
      tableName="ghi",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ghi_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,10},{-74,30}})));
    Wind.WindFarm windFarm(N_windturbines=N_windturbines)
      annotation (Placement(transformation(extent={{-62,32},{-30,62}})));
    Solar.SolarFarm solarFarm(N_solarpanels=N_solarpanels)
      annotation (Placement(transformation(extent={{-60,6},{-30,34}})));
    Natrium.NuclearSystem nuclearSystem(N_reactors=N_reactors)
      annotation (Placement(transformation(extent={{26,-28},{46,-8}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{-12,22},{0,34}})));
    Modelica.Blocks.Math.Add add1(k1=-1)
      annotation (Placement(transformation(extent={{-8,-24},{12,-4}})));
    Hydrogen.HydrogenStorage2 hydrogenStorage
      annotation (Placement(transformation(extent={{64,-28},{84,-8}})));
  equation
    connect(DemandData.y[1], Load.u1) annotation (Line(points={{-71.2,-30},{-56,
            -30},{-56,-38},{-53,-38}},
                                  color={0,0,127}));
    connect(MWh_to_Wavg.y, Load.u2) annotation (Line(points={{-71.2,-54},{-53,
            -54},{-53,-44}},
                        color={0,0,127}));
    connect(WindData.y[1], windFarm.WindData_in)
      annotation (Line(points={{-75.1,47},{-64,47},{-64,46.85},{-59.6,46.85}},
                                                     color={0,0,127}));
    connect(SolarData.y[1], solarFarm.SolarData_in)
      annotation (Line(points={{-73,20},{-58.5,20}},      color={0,0,127}));
    connect(solarFarm.PowerOut, add.u2) annotation (Line(points={{-31.5,20},{
            -22,20},{-22,24.4},{-13.2,24.4}}, color={0,0,127}));
    connect(add.y, add1.u1) annotation (Line(points={{0.6,28},{4,28},{4,0},{-16,
            0},{-16,-8},{-10,-8}}, color={0,0,127}));
    connect(Load.y, add1.u2) annotation (Line(points={{-41.5,-41},{-16,-41},{
            -16,-20},{-10,-20}}, color={0,0,127}));
    connect(add1.y, nuclearSystem.Demand_in) annotation (Line(points={{13,-14},
            {18,-14},{18,-17.1},{25.3,-17.1}}, color={0,0,127}));
    connect(windFarm.PowerOut, add.u1) annotation (Line(points={{-31.92,47},{
            -20,47},{-20,31.6},{-13.2,31.6}}, color={0,0,127}));
    connect(nuclearSystem.NetDemand_out, hydrogenStorage.power_a)
      annotation (Line(points={{47.1,-17.3},{62,-18}}, color={0,0,127}));
    annotation (                                 experiment(
        StopTime=31622400,
        Interval=3600,
        __Dymola_fixedstepsize=360,
        __Dymola_Algorithm="Lsodar"));
  end HESModel3;

  model HESModel4
    parameter Real N_reactors=25  "Number of nuclear reactors/Natrium systems";
    parameter Real N_windturbines=7410
                                      "Number of wind turbines";
    parameter Real N_solarpanels=3.8425e8
                                     "Square meters of solar panels";

    Real total_demand=Load.y;
    Real total_generation=windFarm.PowerOut + solarFarm2.PowerOut + nuclearSystem.E_tot_nuclear + hydrogenStorage.power_b;
    Real gen_load_diff=total_generation-total_demand;

    Modelica.Blocks.Sources.CombiTimeTable DemandData(
      tableOnFile=true,
      tableName="demand",
      fileName=
          "G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Formatted/Load/Load2020_modelica.txt",
      columns=2:size(DemandData.table, 2),
      smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
      "Time series data of ERCOT energy demand in 2020" annotation (Placement(
          transformation(
          extent={{-8,-8},{8,8}},
          rotation=0,
          origin={-80,-30})));

    Modelica.Blocks.Math.Product Load
      annotation (Placement(transformation(extent={{-52,-46},{-42,-36}})));
    Modelica.Blocks.Sources.Constant MWh_to_Wavg(k=1e6)
      annotation (Placement(transformation(extent={{-88,-62},{-72,-46}})));
    Modelica.Blocks.Sources.CombiTimeTable WindData(
      tableOnFile=true,
      tableName="ws50m",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ws50m_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,38},{-76,56}})));
    Modelica.Blocks.Sources.CombiTimeTable SolarData(
      tableOnFile=true,
      tableName="ghi",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ghi_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,10},{-74,30}})));
    Wind.WindFarm windFarm(N_windturbines=N_windturbines)
      annotation (Placement(transformation(extent={{-62,32},{-30,62}})));
    Solar.LimitedSolarFarm solarFarm2(N_solarpanels=N_solarpanels)
      annotation (Placement(transformation(extent={{-60,6},{-30,34}})));
    Natrium.NuclearSystem nuclearSystem(N_reactors=N_reactors)
      annotation (Placement(transformation(extent={{26,-28},{46,-8}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{-12,22},{0,34}})));
    Modelica.Blocks.Math.Add add1(k1=-1)
      annotation (Placement(transformation(extent={{-8,-24},{12,-4}})));
    Hydrogen.HydrogenStorage2 hydrogenStorage
      annotation (Placement(transformation(extent={{64,-28},{84,-8}})));
  equation
    connect(DemandData.y[1], Load.u1) annotation (Line(points={{-71.2,-30},{-56,
            -30},{-56,-38},{-53,-38}},
                                  color={0,0,127}));
    connect(MWh_to_Wavg.y, Load.u2) annotation (Line(points={{-71.2,-54},{-53,
            -54},{-53,-44}},
                        color={0,0,127}));
    connect(WindData.y[1], windFarm.WindData_in)
      annotation (Line(points={{-75.1,47},{-64,47},{-64,46.85},{-59.6,46.85}},
                                                     color={0,0,127}));
    connect(add.y, add1.u1) annotation (Line(points={{0.6,28},{4,28},{4,0},{-16,
            0},{-16,-8},{-10,-8}}, color={0,0,127}));
    connect(Load.y, add1.u2) annotation (Line(points={{-41.5,-41},{-16,-41},{
            -16,-20},{-10,-20}}, color={0,0,127}));
    connect(add1.y, nuclearSystem.Demand_in) annotation (Line(points={{13,-14},
            {18,-14},{18,-17.1},{25.3,-17.1}}, color={0,0,127}));
    connect(windFarm.PowerOut, add.u1) annotation (Line(points={{-31.92,47},{
            -20,47},{-20,31.6},{-13.2,31.6}}, color={0,0,127}));
    connect(nuclearSystem.NetDemand_out, hydrogenStorage.power_a)
      annotation (Line(points={{47.1,-17.3},{62,-18}}, color={0,0,127}));
    connect(SolarData.y[1], solarFarm2.SolarData_in)
      annotation (Line(points={{-73,20},{-58.5,20}}, color={0,0,127}));
    connect(solarFarm2.PowerOut, add.u2) annotation (Line(points={{-31.5,20},{-22,
            20},{-22,24.4},{-13.2,24.4}}, color={0,0,127}));
    annotation (                                 experiment(
        StopTime=31622400,
        Interval=3600,
        __Dymola_fixedstepsize=360,
        __Dymola_Algorithm="Lsodar"));
  end HESModel4;

  model HESModel5
    parameter Real N_reactors=61  "Number of nuclear reactors/Natrium systems";
    parameter Real N_windturbines=5317
                                      "Number of wind turbines";
    parameter Real N_solarpanels=3.079e8
                                     "Square meters of solar panels";
    parameter Real Hours_Thermal_Storage=5.5;

    Real total_demand=Load.y;
    Real total_generation=windFarm.PowerOut + solarFarm2.PowerOut + nuclearSystem.E_tot_nuclear + hydrogenStorage.power_out;
    Real gen_load_diff=total_generation-total_demand;

    Modelica.Blocks.Sources.CombiTimeTable DemandData(
      tableOnFile=true,
      tableName="demand",
      fileName=
          "G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Formatted/Load/Load2020_modelica.txt",
      columns=2:size(DemandData.table, 2),
      smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative,
      extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
      "Time series data of ERCOT energy demand in 2020" annotation (Placement(
          transformation(
          extent={{-8,-8},{8,8}},
          rotation=0,
          origin={-80,-30})));

    Modelica.Blocks.Math.Product Load
      annotation (Placement(transformation(extent={{-52,-48},{-38,-34}})));
    Modelica.Blocks.Sources.Constant MWh_to_Wavg(k=1e6)
      annotation (Placement(transformation(extent={{-88,-62},{-72,-46}})));
    Modelica.Blocks.Sources.CombiTimeTable WindData(
      tableOnFile=true,
      tableName="ws50m",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ws50m_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,38},{-76,56}})));
    Modelica.Blocks.Sources.CombiTimeTable SolarData(
      tableOnFile=true,
      tableName="ghi",
      fileName="G:/My Drive/Hybrid Energy Systems (MAE 5450)/Project/Data/Weather/ghi_avg_modelica.txt")
      annotation (Placement(transformation(extent={{-94,10},{-74,30}})));
    Wind.WindFarm windFarm(N_windturbines=N_windturbines)
      annotation (Placement(transformation(extent={{-68,32},{-36,62}})));
    Solar.LimitedSolarFarm solarFarm2(N_solarpanels=N_solarpanels)
      annotation (Placement(transformation(extent={{-66,6},{-36,34}})));
    Natrium.NuclearSystem nuclearSystem(N_reactors=N_reactors, natriumSimple(
          m_cold_start=0.5*Hours_Thermal_Storage/5.5*26e6, m_hot_start=0.5*
            Hours_Thermal_Storage/5.5*26e6))
      annotation (Placement(transformation(extent={{24,-24},{44,-4}})));
    Modelica.Blocks.Math.Add add
      annotation (Placement(transformation(extent={{-30,24},{-16,38}})));
    Modelica.Blocks.Math.Add add1(k1=-1)
      annotation (Placement(transformation(extent={{-8,-24},{12,-4}})));
    Hydrogen.HydrogenStorage3 hydrogenStorage
      annotation (Placement(transformation(extent={{56,-24},{76,-4}})));
  equation
    connect(WindData.y[1], windFarm.WindData_in)
      annotation (Line(points={{-75.1,47},{-64,47},{-64,46.85},{-65.6,46.85}},
                                                     color={0,0,127}));
    connect(Load.y, add1.u2) annotation (Line(points={{-37.3,-41},{-16,-41},{
            -16,-20},{-10,-20}}, color={0,0,127}));
    connect(add1.y, nuclearSystem.Demand_in) annotation (Line(points={{13,-14},
            {23.4,-14}},                       color={0,0,127}));
    connect(SolarData.y[1], solarFarm2.SolarData_in)
      annotation (Line(points={{-73,20},{-64.5,20}}, color={0,0,127}));
    connect(nuclearSystem.NetDemand_out, hydrogenStorage.power_a)
      annotation (Line(points={{44.8,-14},{56.2,-14}}, color={0,0,127}));
    connect(windFarm.PowerOut, add.u1) annotation (Line(points={{-37.92,47},{
            -34,47},{-34,35.2},{-31.4,35.2}}, color={0,0,127}));
    connect(solarFarm2.PowerOut, add.u2) annotation (Line(points={{-37.5,20},{
            -34,20},{-34,26.8},{-31.4,26.8}}, color={0,0,127}));
    connect(add.y, add1.u1) annotation (Line(points={{-15.3,31},{-12,31},{-12,4},
            {-20,4},{-20,-8},{-10,-8}}, color={0,0,127}));
    connect(MWh_to_Wavg.y, Load.u2) annotation (Line(points={{-71.2,-54},{-66,
            -54},{-66,-45.2},{-53.4,-45.2}}, color={0,0,127}));
    connect(DemandData.y[1], Load.u1) annotation (Line(points={{-71.2,-30},{-66,
            -30},{-66,-36.8},{-53.4,-36.8}}, color={0,0,127}));
    annotation (                                 experiment(
        StopTime=31622400,
        Interval=3600,
        __Dymola_fixedstepsize=360,
        __Dymola_Algorithm="Lsodar"));
  end HESModel5;

  model NatriumDemo
    Natrium.NatriumSimple natriumSimple
      annotation (Placement(transformation(extent={{8,-22},{50,20}})));
    Modelica.Blocks.Sources.Sine sine(
      amplitude=250e6,
      f=1/21600,
      phase=0,
      offset=250e6,
      startTime=0)
      annotation (Placement(transformation(extent={{-70,14},{-48,36}})));
    Modelica.Blocks.Sources.Pulse pulse(
      amplitude=200e6,
      width=25,
      period(displayUnit="h") = 86400,
      nperiod=-1,
      offset=300e6,
      startTime(displayUnit="h") = 28800)
      annotation (Placement(transformation(extent={{-84,-24},{-64,-4}})));
  equation
    connect(sine.y, natriumSimple.demand) annotation (Line(points={{-46.9,25},{
            -36,25},{-36,-1},{6.74,-1}}, color={0,0,127}));
    annotation (
      Icon(coordinateSystem(preserveAspectRatio=false)),
      Diagram(coordinateSystem(preserveAspectRatio=false)),
      experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
  end NatriumDemo;
  annotation (uses(TRANSFORM(version="0.5"), Modelica(version="4.0.0")));
end HESProject;
